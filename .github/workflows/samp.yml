name: Automatic PR Merger

on:
  push: {} # update PR when base branch is updated
  status: {} # try to merge when other checks are completed
  pull_request_review: # try to merge after review
    types:
      - submitted
      - edited
      - dismissed
  pull_request: # try to merge if labels have changed (white/black list)
    types:
      - labeled
      - unlabeled

env:
  DOMAIN: ${{ secrets.DOMAIN}}
  RASA_X_API_TOKEN: ${{secrets.RASA_X_API_TOKEN}}

jobs:
  # that's all. two steps are needed - if PR is mergeable according to
  # branch protection rules it will be merged automatically
  # and latest model file is trained & uploaded to Rasa X
  mergepal:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: rasahq/merge-pal-action@v0.5.1
        with:
          token: ${{ secrets.GIT_TOKEN }}
  train-upload-model:
    name: Train and Upload Model to Rasa X
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: set_training
      if: |
          contains(  steps.files.outputs.all, 'data/' )
          || contains(  steps.files.outputs.all, 'config.yml' )
          || contains(  steps.files.outputs.all, 'domain.yml' )
      run: echo "RUN_TRAINING=true" >> $GITHUB_ENV
    - name: Set up Python 3.7
      if: env.RUN_TRAINING == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      if: env.RUN_TRAINING == 'true'
      run: |
          python -m pip install --upgrade "pip<20"
          pip install -r requirements.txt
    - name: Train Model
      if: env.RUN_TRAINING == 'true'
      working-directory: ${{ github.workspace }}
      run: |
        rasa train
    - name: Upload model
      if: env.RUN_TRAINING == 'true'
      working-directory: ${{ github.workspace }}
      run: |
        model_path=`ls models/*.tar.gz | head -n 1`
        echo "-----------------------------$model_path"
        curl -k -F "model=@${model_path}" "${{ env.DOMAIN }}/projects/default/models?api_token=${{env.RASA_X_API_TOKEN}}"
    - name: Model active
      if: env.RUN_TRAINING == 'true'
      working-directory: ${{ github.workspace }}
      run: |
        model_path=`ls models/*.tar.gz | head -n 1`
        export model_fileName=$(basename ${model_path} .tar.gz)
        # ensure model is ready and tag as production
        sleep 5
        curl -X PUT "${{ env.DOMAIN }}/projects/default/models/${model_fileName}/tags/production?api_token=${{env.RASA_X_API_TOKEN}}"
